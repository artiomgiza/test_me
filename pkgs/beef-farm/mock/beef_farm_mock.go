// Code generated by MockGen. DO NOT EDIT.
// Source: pkgs/beef-farm/beef_farm.go

// Package mock_beeffarm is a generated GoMock package.
package mock_beeffarm

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProvider is a mock of Provider interface
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// GetEntrecote mocks base method
func (m *MockProvider) GetEntrecote(weight int) (int, error) {
	ret := m.ctrl.Call(m, "GetEntrecote", weight)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntrecote indicates an expected call of GetEntrecote
func (mr *MockProviderMockRecorder) GetEntrecote(weight interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntrecote", reflect.TypeOf((*MockProvider)(nil).GetEntrecote), weight)
}

// GetTBone mocks base method
func (m *MockProvider) GetTBone(weight int) (int, error) {
	ret := m.ctrl.Call(m, "GetTBone", weight)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTBone indicates an expected call of GetTBone
func (mr *MockProviderMockRecorder) GetTBone(weight interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTBone", reflect.TypeOf((*MockProvider)(nil).GetTBone), weight)
}
